// 针对cout打印数组的疑惑，同时打印一个指针和一个字符串，是否后面的字符串也是指针形式
//原来对出char构造的字符串的地址就是其本身，并且变量名和指针可以一起使用
#include <iostream>
int main()
{
    using namespace std;
    char animal[20] = "bear";
    const char * bird = "wren";
    char* ps; //最好在这里进行初始化
    char* pt;

    pt = animal;
    cout<<"pt="<<pt<<endl;

    cout << animal << " and "
    << bird << endl;

    cout<<"enter a kind of animal:"<<endl;
    cin >> animal;
    cin.get();
    ps = animal;
    cout <<"ps = "<<(int*)ps<<endl;//这里说明了如果直接用"="复制，会把地址也给覆盖掉
    cout<<animal<<(int*)animal<<endl;

    ps = new char[strlen(animal)-1]; //一个声明
    strcpy(ps,animal);
    cout<<animal<<(int*)animal<<endl;
    cout<<ps<<(int*)ps<<endl; // 如果是用strcpy进行复制，不会改变ps的地址
    delete [] ps;
    return 0;
}

这里主要讲了=和strcpy的区别，一个会覆盖地址，一个不会
strcpy和strcnpy的区别，都是赋值运算符，第一个strcpy会导致越界问题，第二个有三个参数，会输入字符串的长度
