首先要搞明白，指针是针对变量的，不能是针对固定的一个值的，只有变量才有指针，这是指针的定义
指针的初始化：
int* 指针名
char* 指针名
double* 指针名

上面这种 typeName * pointer 的方式是指针的初始化，就是指现在定义了一个指针
// addpntrs.cpp -- pointer addition
#include <iostream>
int main()
{
    using namespace std;
    char * p;
    char sw = "a";
    p = &sw;
    cout << p << endl;
    return 0;
}

// addpntrs.cpp -- pointer addition
#include <iostream>
int main()
{
    using namespace std;
    double animal[20] = {100,101,200};//这种是定义一个已知的数组
    double *p = animal;
    double *s = &animal[0];  // 要搞明白之间的转换关系，数组的第一个元素的地址是数组名
    cout << *(p+1) <<endl; // 101 ，并且这里p=s=&animal[0]
    return 0;
}

#include <iostream>
int main()
{
    using namespace std;
    int * p = new int;
    *p = 1000;
    cout<<*p<<endl;
    delete p;
    return 0;
}
delet 和 new 要对称

#include <iostream>
int main()
{
    using namespace std;
    int * p = new int[3];//如果是new一个数组，则p可以当作数组来用，因为数组没有名字，这里用指针名字代替，并且这个指针名字可以加减运算
    p[0] = 1000;
    p[1] = 2;
    p[3] = 5;
    cout<<*(p+1)<<endl;//这里*(p+1) == p[1]
    delete [] p;
    return 0;
}

指针关键从定义出发是变量的指针，必须的是变量，什么是变量，就是必须是生命的有名称，有类型的
然后又分为了两种情形，第一种是给已知的变量或者数组分配个指针，另外一个是给指针分配一个新的内存：
针对第一种，如果是一个变量，就是该变量的地址，如果是一个数组，就是该数组第一个元素的地址，通过指针访问后面的变量，通过指针的加减运算
针对第二种，指针指向了一个新分配的名字，但是在创建的时候，没有给新分配的内存所对应的变量或者数组定义名字，对于单个变量还是很好定义，但是对于一个数组的话，就不太好表示，这里用指针的名字作为了该数组的名字，指针的名字有双重作用，可以加减，也可以直接获取该数组中的值

